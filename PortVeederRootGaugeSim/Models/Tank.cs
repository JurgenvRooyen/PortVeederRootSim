using System;
using System.Collections.Generic;
using System.Threading;

namespace PortVeederRootGaugeSim
{
    class Tank
    {
        // Tank attributes
        public int TankId { get; set; }
        public double TankHight { get; set; }
        public double TankDiameter { get; set; }

        private double productLevel;

        public double GetProductLevel()
        {
            return productLevel;
        }

        public Boolean SetProductLevel(double value)
        {
            if (value + GetPotentialProductLevel() > TankHight)
            {
                return false;
            }
            productLevel = value;
            return true;
            
        }

        private double waterLevel;

        public double GetWaterLevel()
        {
            return waterLevel;
        }

        public Boolean SetWaterLevel(double value)
        {
            if (value + productLevel + GetPotentialProductLevel() > TankHight)
            {
                return false;
            }
            waterLevel = value;
            return true;
        }

        public int ProductTemerature { get; set; }
        public List<TankDrop> TankDrops { get; set; }

        public const double ThermalExpansionCoefficient = 0.0018;

        // Alarm attributes
        public double FullVolume;
        
        public double MaxSafeWorkingCapacity { get; set; }
        public double OverFillLimit { get; set; }
        public double HighProductAlarmLevel { get; set; }
        public double DeliveryNeededWarningLevel { get; set; }
        public double LowProductAlarmLevel { get; set; }
        public double HighWaterAlarmLevel { get; set; }
        public double HighWaterWarningLevel { get; set; }


        // tank dropping attributes
        Boolean TankDropping { get; set; }
        Boolean TankLeaking { get; set; }
        public Thread DropThread{ get; set; }



        public Tank(int tankId, double tankLength, double tankDiameter, double productLevel, double waterLevel, int productTemerature, List<TankDrop> tankDrops)
        {
            TankId = tankId;
            TankHight = tankLength;
            TankDiameter = tankDiameter;
            SetProductLevel(productLevel);
            SetWaterLevel(waterLevel);
            ProductTemerature = productTemerature;
            TankDrops = tankDrops;

            TankDropping = false;
            DropThread = new Thread(new ThreadStart(TankDropThread));





            FullVolume = LevelToVolume(tankLength);

            // Alarm attributes are generated by default which can edit by get and set
            MaxSafeWorkingCapacity      = 0.95 * TankHight;
            OverFillLimit               = 0.90 * TankHight;
            HighProductAlarmLevel       = 0.80 * TankHight;
            DeliveryNeededWarningLevel  = 0.30 * TankHight;
            LowProductAlarmLevel        = 0.20 * TankHight;
            HighWaterAlarmLevel         = 0.10 * TankHight;
            HighWaterWarningLevel       = 0.05 * TankHight;

        }


        // Add tanl drops and give alarms when needed
        public Boolean AddTankDropAndFeedBack(TankDrop tp)
        {
          
            double PotentialProductLevel = GetPotentialProductLevel();


            if (VolumeToLevel(GetGrossObservedVolume()) + PotentialProductLevel + VolumeToLevel(tp.Volume)  > MaxSafeWorkingCapacity)
            {
                return false;
            }
            

            TankDrops.Add(tp);
            return true;
        }



        public Boolean  TankDropPerInterval() 
        {
            for (int i = 0; i < TankDrops.Count; i++) 
            {
                if (TankDrops[i].Dropped == false) 
                {
                    double IncreasdVolume = TankDrops[i].DropingTankPerInterval();
                    SetProductLevel(GetProductLevel() + VolumeToLevel(IncreasdVolume));
                    return true;

                }
            }
            return false;
        }

        public void TankDropThread()
        {
            while (TankDropping & TankDropPerInterval()) 
            {
                Thread.Sleep(100);
            }
            TankDropping = false;
        }

        // To start drop or stop drop
        public void TankDropSwich()
        {

            if (TankDropping)
            {
                TankDropping = false;
            }
            else 
            { 
                TankDropping = true;
                DropThread = new Thread(new ThreadStart(TankDropThread));
                DropThread.Start(); 
            }
        }

  

        public double GetPotentialProductLevel()
        {
            double PotentialVolume = 0;

            for (int i = 0; i < TankDrops.Count; i++)
            {
                PotentialVolume += TankDrops[i].Volume;
            }

            double PotentialProductLevel = VolumeToLevel(PotentialVolume);

            return PotentialProductLevel;
        }

        public double GetGrossObservedVolume() 
        {
            return LevelToVolume(GetProductLevel()) + LevelToVolume(GetWaterLevel());
        }

        public double GetGrossStandardVolume()
        {
            double tempDelta = ProductTemerature - 15;
            return LevelToVolume(GetProductLevel()) * (1 - ThermalExpansionCoefficient * tempDelta);
        }

        public double GetUllage() 
        {
            return LevelToVolume(MaxSafeWorkingCapacity - GetProductLevel() - GetWaterLevel());
        }


       





        private double VolumeToLevel(double v) 
        {
           double l =  v/ (Math.PI * Math.Pow(TankDiameter / 2, 2));
           return l;
        }

        private double LevelToVolume(double l)
        {
            double v = l * (Math.PI * Math.Pow(TankDiameter / 2, 2));
            return v;
        }

        




     


        public void Connect(Tank t)
        {
            //TODO-Optional
        }

        public void Leaking()
        {
            //TODO-Optional
        }

        public override string ToString()
        {
            return $"{{{nameof(TankId)}={TankId.ToString()}, {nameof(TankHight)}={TankHight.ToString()}, {nameof(TankDiameter)}={TankDiameter.ToString()}, {nameof(productLevel)}={GetProductLevel().ToString()}, {nameof(waterLevel)}={GetWaterLevel().ToString()}, {nameof(ProductTemerature)}={ProductTemerature.ToString()}, {nameof(TankDrops)}={TankDrops.Count}, {nameof(MaxSafeWorkingCapacity)}={MaxSafeWorkingCapacity.ToString("0.##")}}}"+ "           Gross Observed Volume=" + GetGrossObservedVolume().ToString("0.##") + "           Gross Standard Volume=" + GetGrossStandardVolume().ToString("0.##") + "        Ullage=" + GetUllage().ToString("0.##");
        }
    }
}
